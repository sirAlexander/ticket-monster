package org.jboss.jdf.example.ticketmonster.model;

import java.io.Serializable;
import java.lang.Long;
import java.util.Date;
import javax.persistence.*;
import javax.validation.constraints.NotNull;

import org.jboss.jdf.example.ticketmonster.model.Show;

/**
 * Entity implementation class for Entity: Performance
 *
 */
@Entity

public class Performance implements Serializable {
	
	private static final long serialVersionUID = 1L;

	   
	/**
     * The synthetic id of the object.
     */
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;
	
	/**
     * <p>
     * The date and start time of the performance.
     * </p>
     * 
     * <p>
     * A Java {@link Date} object represents both a date and a time, whilst an RDBMS splits out Date, Time and Timestamp.
     * Therefore we instruct JPA to store this date as a timestamp using the <code>@Temporal(TIMESTAMP)</code> annotation.
     * </p>
     * 
     * <p>
     * The date and time of the performance is required, and the Bean Validation constraint <code>@NotNull</code> enforces this.
     * </p>
     */
    @Temporal(TemporalType.TIMESTAMP)
    @NotNull
	private Date date;
    
    /**
     * <p>
     * The show of which this is a performance. The <code>@ManyToOne<code> JPA mapping establishes this relationship.
     * </p>
     * 
     * <p>
     * The show of which this is a performance is required, and the Bean Validation constraint <code>@NotNull</code> enforces
     * this.
     * </p>
     */
    @ManyToOne
    @NotNull
	private Show show;
	

	public Performance() {
		super();
	}   
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}   
	public Date getDate() {
		return this.date;
	}

	public void setDate(Date date) {
		this.date = date;
	}   
	public Show getShow() {
		return this.show;
	}

	public void setShow(Show show) {
		this.show = show;
	}
	
	
	
	
	
	
   
}
